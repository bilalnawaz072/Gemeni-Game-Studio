[
  {
    "id": "1756548701542",
    "name": "Flappy Google",
    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Flappy Google</title>\n    <style>\n        :root {\n            --bg-color: #f0f0f0;\n            --game-bg-color: #70c5ce;\n            --pipe-color: #74bf2e;\n            --pipe-border-color: #4b8313;\n            --text-color: #ffffff;\n            --shadow-color: #0000004d;\n            --font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n        }\n\n        body {\n            margin: 0;\n            padding: 0;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            background-color: var(--bg-color);\n            font-family: var(--font-family);\n            color: var(--text-color);\n        }\n\n        #game-container {\n            position: relative;\n            width: 400px;\n            height: 600px;\n            overflow: hidden;\n            border-radius: 10px;\n            box-shadow: 0 10px 20px var(--shadow-color);\n        }\n\n        #gameCanvas {\n            background-color: var(--game-bg-color);\n            display: block;\n        }\n\n        .overlay {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            text-align: center;\n            background-color: rgba(0, 0, 0, 0.4);\n            backdrop-filter: blur(2px);\n        }\n\n        .overlay h1 {\n            font-size: 50px;\n            margin-bottom: 10px;\n            text-shadow: 3px 3px 5px var(--shadow-color);\n        }\n\n        .overlay p {\n            font-size: 20px;\n            margin: 5px 0;\n            text-shadow: 2px 2px 3px var(--shadow-color);\n        }\n\n        #restart-button {\n            margin-top: 20px;\n            padding: 15px 30px;\n            font-size: 20px;\n            font-weight: bold;\n            color: #4285F4;\n            background-color: #fff;\n            border: none;\n            border-radius: 8px;\n            cursor: pointer;\n            transition: transform 0.2s, box-shadow 0.2s;\n            box-shadow: 0 4px 6px var(--shadow-color);\n        }\n\n        #restart-button:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 6px 10px var(--shadow-color);\n        }\n        \n        #score-display {\n            position: absolute;\n            top: 20px;\n            left: 50%;\n            transform: translateX(-50%);\n            font-size: 50px;\n            font-weight: bold;\n            text-shadow: 3px 3px 5px rgba(0,0,0,0.5);\n            z-index: 10;\n        }\n    </style>\n</head>\n<body>\n\n    <div id=\"game-container\">\n        <canvas id=\"gameCanvas\" width=\"400\" height=\"600\"></canvas>\n        <div id=\"score-display\">0</div>\n        \n        <div id=\"start-screen\" class=\"overlay\">\n            <h1>Flappy Google</h1>\n            <p>Click, tap, or press Space to start</p>\n            <p>Avoid the pipes!</p>\n        </div>\n\n        <div id=\"game-over-screen\" class=\"overlay\" style=\"display: none;\">\n            <h1>Game Over</h1>\n            <p>Score: <span id=\"final-score\">0</span></p>\n            <p>High Score: <span id=\"high-score\">0</span></p>\n            <button id=\"restart-button\">Restart</button>\n        </div>\n    </div>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- DOM Elements ---\n            const canvas = document.getElementById('gameCanvas');\n            const ctx = canvas.getContext('2d');\n            const scoreDisplay = document.getElementById('score-display');\n            const startScreen = document.getElementById('start-screen');\n            const gameOverScreen = document.getElementById('game-over-screen');\n            const finalScoreEl = document.getElementById('final-score');\n            const highScoreEl = document.getElementById('high-score');\n            const restartButton = document.getElementById('restart-button');\n\n            // --- Game Constants ---\n            const CANVAS_WIDTH = canvas.width;\n            const CANVAS_HEIGHT = canvas.height;\n\n            // --- Game State ---\n            let gameState = 'READY'; // READY, PLAYING, GAME_OVER\n            let score = 0;\n            let highScore = 0;\n            let frames = 0;\n\n            // --- Google Logo SVG ---\n            // This SVG is embedded as a Base64 string to keep everything in one file.\n            const GOOGLE_LOGO_SVG = `\n                <svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\n                    <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\n                    <path d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l3.66-2.84z\" fill=\"#FBBC05\"/>\n                    <path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\" fill=\"#EA4335\"/>\n                    <path d=\"M1 1h22v22H1z\" fill=\"none\"/>\n                </svg>`;\n            const birdImage = new Image();\n            birdImage.src = 'data:image/svg+xml;base64,' + btoa(GOOGLE_LOGO_SVG);\n\n            // --- Bird Object ---\n            const bird = {\n                x: 60,\n                y: CANVAS_HEIGHT / 2,\n                width: 45,\n                height: 45,\n                gravity: 0.25, // MODIFIED: Was 0.35. Reduced gravity for a slower fall.\n                lift: -6.5,    // MODIFIED: Was -7. Gentler flap for more control.\n                velocity: 0,\n\n                draw: function() {\n                    ctx.save();\n                    ctx.translate(this.x + this.width / 2, this.y + this.height / 2);\n                    // Rotate based on velocity for a more dynamic feel\n                    const rotation = Math.min(Math.max(-0.5, this.velocity / 15), 0.9);\n                    ctx.rotate(rotation);\n                    ctx.drawImage(birdImage, -this.width / 2, -this.height / 2, this.width, this.height);\n                    ctx.restore();\n                },\n\n                update: function() {\n                    this.velocity += this.gravity;\n                    this.y += this.velocity;\n\n                    // Prevent bird from going off the top of the screen\n                    if (this.y < 0) {\n                        this.y = 0;\n                        this.velocity = 0;\n                    }\n                },\n\n                flap: function() {\n                    this.velocity = this.lift;\n                },\n\n                reset: function() {\n                    this.y = CANVAS_HEIGHT / 2;\n                    this.velocity = 0;\n                }\n            };\n\n            // --- Pipes Object ---\n            const pipes = {\n                array: [],\n                width: 70,\n                gap: 200,             // MODIFIED: Was 160. Wider gap is easier to navigate.\n                speed: 2,             // MODIFIED: Was 3. Slower pipes give more reaction time.\n                spawnInterval: 120,   // MODIFIED: Was 90. More horizontal space between pipes.\n\n                draw: function() {\n                    this.array.forEach(pipe => {\n                        ctx.fillStyle = getComputedStyle(document.documentElement).getPropertyValue('--pipe-color').trim();\n                        ctx.strokeStyle = getComputedStyle(document.documentElement).getPropertyValue('--pipe-border-color').trim();\n                        ctx.lineWidth = 4;\n\n                        // Top pipe\n                        ctx.fillRect(pipe.x, 0, this.width, pipe.y);\n                        ctx.strokeRect(pipe.x, 0, this.width, pipe.y);\n\n                        // Bottom pipe\n                        const bottomPipeY = pipe.y + this.gap;\n                        const bottomPipeHeight = CANVAS_HEIGHT - bottomPipeY;\n                        ctx.fillRect(pipe.x, bottomPipeY, this.width, bottomPipeHeight);\n                        ctx.strokeRect(pipe.x, bottomPipeY, this.width, bottomPipeHeight);\n                    });\n                },\n\n                update: function() {\n                    // Spawn new pipes\n                    if (frames % this.spawnInterval === 0) {\n                        const minHeight = 80;\n                        const maxHeight = CANVAS_HEIGHT - this.gap - minHeight;\n                        const randomY = Math.floor(Math.random() * (maxHeight - minHeight + 1) + minHeight);\n                        this.array.push({ x: CANVAS_WIDTH, y: randomY, passed: false });\n                    }\n\n                    // Move and manage pipes\n                    this.array.forEach(pipe => {\n                        pipe.x -= this.speed;\n\n                        // Check for score\n                        if (!pipe.passed && pipe.x + this.width < bird.x) {\n                            pipe.passed = true;\n                            score++;\n                            updateScoreDisplay();\n                        }\n                    });\n\n                    // Remove off-screen pipes\n                    this.array = this.array.filter(pipe => pipe.x + this.width > 0);\n                },\n\n                reset: function() {\n                    this.array = [];\n                }\n            };\n\n            // --- Collision Detection ---\n            function checkCollisions() {\n                // Ground collision\n                if (bird.y + bird.height >= CANVAS_HEIGHT) {\n                    return true;\n                }\n                \n                // Pipe collision\n                for (let i = 0; i < pipes.array.length; i++) {\n                    const p = pipes.array[i];\n                    if (\n                        bird.x < p.x + pipes.width &&\n                        bird.x + bird.width > p.x &&\n                        (bird.y < p.y || bird.y + bird.height > p.y + pipes.gap)\n                    ) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n\n            // --- UI and State Management ---\n            function updateScoreDisplay() {\n                scoreDisplay.textContent = score;\n            }\n\n            function loadHighScore() {\n                const storedHighScore = localStorage.getItem('flappyGoogleHighScore');\n                highScore = storedHighScore ? parseInt(storedHighScore, 10) : 0;\n            }\n\n            function saveHighScore() {\n                if (score > highScore) {\n                    highScore = score;\n                    localStorage.setItem('flappyGoogleHighScore', highScore);\n                }\n            }\n\n            function handleInput() {\n                switch (gameState) {\n                    case 'READY':\n                        startGame();\n                        break;\n                    case 'PLAYING':\n                        bird.flap();\n                        break;\n                }\n            }\n            \n            function startGame() {\n                gameState = 'PLAYING';\n                startScreen.style.display = 'none';\n                gameOverScreen.style.display = 'none';\n                scoreDisplay.style.display = 'block';\n                bird.flap();\n            }\n\n            function triggerGameOver() {\n                if (gameState === 'GAME_OVER') return;\n                gameState = 'GAME_OVER';\n                saveHighScore();\n                finalScoreEl.textContent = score;\n                highScoreEl.textContent = highScore;\n                gameOverScreen.style.display = 'flex';\n                scoreDisplay.style.display = 'none';\n            }\n\n            function resetGame() {\n                bird.reset();\n                pipes.reset();\n                score = 0;\n                frames = 0;\n                updateScoreDisplay();\n                gameState = 'READY';\n                startScreen.style.display = 'flex';\n                gameOverScreen.style.display = 'none';\n                scoreDisplay.style.display = 'block';\n                scoreDisplay.textContent = '0';\n            }\n            \n            // --- Game Loop ---\n            function update() {\n                if (gameState !== 'PLAYING') return;\n                \n                bird.update();\n                pipes.update();\n                \n                if (checkCollisions()) {\n                    triggerGameOver();\n                }\n\n                frames++;\n            }\n\n            function draw() {\n                ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n                pipes.draw();\n                bird.draw();\n            }\n\n            function gameLoop() {\n                update();\n                draw();\n                requestAnimationFrame(gameLoop);\n            }\n\n            // --- Event Listeners ---\n            document.addEventListener('keydown', (e) => {\n                if (e.code === 'Space') {\n                    handleInput();\n                }\n            });\n            document.addEventListener('mousedown', handleInput);\n            document.addEventListener('touchstart', handleInput);\n            restartButton.addEventListener('click', (e) => {\n                e.stopPropagation(); // Prevent the click from triggering a flap\n                resetGame();\n            });\n\n            // --- Initialization ---\n            function init() {\n                loadHighScore();\n                resetGame();\n                gameLoop();\n            }\n\n            init();\n        });\n    </script>\n\n</body>\n</html>"
  },
  {
    "id": "1756631011217",
    "name": "Flappy Google cheater edition",
    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Flappy Google</title>\n    <style>\n        :root {\n            --bg-color: #f0f0f0;\n            --game-bg-color: #70c5ce;\n            --pipe-color: #74bf2e;\n            --pipe-border-color: #4b8313;\n            --text-color: #ffffff;\n            --shadow-color: #0000004d;\n            --font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n        }\n\n        body {\n            margin: 0;\n            padding: 0;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            background-color: var(--bg-color);\n            font-family: var(--font-family);\n            color: var(--text-color);\n        }\n\n        #game-container {\n            position: relative;\n            width: 400px;\n            height: 600px;\n            overflow: hidden;\n            border-radius: 10px;\n            box-shadow: 0 10px 20px var(--shadow-color);\n        }\n\n        #gameCanvas {\n            background-color: var(--game-bg-color);\n            display: block;\n        }\n\n        .overlay {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            text-align: center;\n            background-color: rgba(0, 0, 0, 0.4);\n            backdrop-filter: blur(2px);\n        }\n\n        .overlay h1 {\n            font-size: 50px;\n            margin-bottom: 10px;\n            text-shadow: 3px 3px 5px var(--shadow-color);\n        }\n\n        .overlay p {\n            font-size: 20px;\n            margin: 5px 0;\n            text-shadow: 2px 2px 3px var(--shadow-color);\n        }\n\n        #restart-button {\n            margin-top: 20px;\n            padding: 15px 30px;\n            font-size: 20px;\n            font-weight: bold;\n            color: #4285F4;\n            background-color: #fff;\n            border: none;\n            border-radius: 8px;\n            cursor: pointer;\n            transition: transform 0.2s, box-shadow 0.2s;\n            box-shadow: 0 4px 6px var(--shadow-color);\n        }\n\n        #restart-button:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 6px 10px var(--shadow-color);\n        }\n        \n        #score-display {\n            position: absolute;\n            top: 20px;\n            left: 50%;\n            transform: translateX(-50%);\n            font-size: 50px;\n            font-weight: bold;\n            text-shadow: 3px 3px 5px rgba(0,0,0,0.5);\n            z-index: 10;\n        }\n\n        /* --- Cheat Mode Styles --- */\n        .cheat-toggle-container {\n            margin-top: 25px;\n            display: flex;\n            align-items: center;\n            gap: 15px;\n            font-size: 16px;\n            text-shadow: 2px 2px 3px var(--shadow-color);\n        }\n\n        .cheat-toggle {\n            width: 50px;\n            height: 26px;\n            background-color: #ccc;\n            border-radius: 13px;\n            cursor: pointer;\n            position: relative;\n            transition: background-color 0.3s;\n            flex-shrink: 0;\n        }\n\n        .cheat-toggle.active {\n            background-color: #34A853; /* Google Green */\n        }\n\n        .cheat-toggle-knob {\n            width: 22px;\n            height: 22px;\n            background-color: white;\n            border-radius: 50%;\n            position: absolute;\n            top: 2px;\n            left: 2px;\n            transition: transform 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n        }\n\n        .cheat-toggle.active .cheat-toggle-knob {\n            transform: translateX(24px);\n        }\n    </style>\n</head>\n<body>\n\n    <div id=\"game-container\">\n        <canvas id=\"gameCanvas\" width=\"400\" height=\"600\"></canvas>\n        <div id=\"score-display\">0</div>\n        \n        <div id=\"start-screen\" class=\"overlay\">\n            <h1>Flappy Google</h1>\n            <p>Click, tap, or press Space to start</p>\n            <p>Avoid the pipes!</p>\n            <div class=\"cheat-toggle-container\">\n                <label>Cheat Mode (Press 'C')</label>\n                <div class=\"cheat-toggle\">\n                    <div class=\"cheat-toggle-knob\"></div>\n                </div>\n            </div>\n        </div>\n\n        <div id=\"game-over-screen\" class=\"overlay\" style=\"display: none;\">\n            <h1>Game Over</h1>\n            <p>Score: <span id=\"final-score\">0</span></p>\n            <p>High Score: <span id=\"high-score\">0</span></p>\n            <p id=\"cheat-message\" style=\"display: none; font-size: 14px; color: #FBBC05; text-shadow: none; margin-top: 5px;\">High score saving is disabled in cheat mode.</p>\n            <button id=\"restart-button\">Restart</button>\n            <div class=\"cheat-toggle-container\">\n                <label>Cheat Mode (Press 'C')</label>\n                <div class=\"cheat-toggle\">\n                    <div class=\"cheat-toggle-knob\"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- DOM Elements ---\n            const canvas = document.getElementById('gameCanvas');\n            const ctx = canvas.getContext('2d');\n            const scoreDisplay = document.getElementById('score-display');\n            const startScreen = document.getElementById('start-screen');\n            const gameOverScreen = document.getElementById('game-over-screen');\n            const finalScoreEl = document.getElementById('final-score');\n            const highScoreEl = document.getElementById('high-score');\n            const restartButton = document.getElementById('restart-button');\n            const cheatToggles = document.querySelectorAll('.cheat-toggle');\n            const cheatMessage = document.getElementById('cheat-message');\n\n            // --- Game Constants ---\n            const CANVAS_WIDTH = canvas.width;\n            const CANVAS_HEIGHT = canvas.height;\n\n            // --- Game State ---\n            let gameState = 'READY'; // READY, PLAYING, GAME_OVER\n            let score = 0;\n            let highScore = 0;\n            let frames = 0;\n            let cheatModeActive = false;\n\n            // --- Google Logo SVG ---\n            const GOOGLE_LOGO_SVG = `\n                <svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\n                    <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\n                    <path d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l3.66-2.84z\" fill=\"#FBBC05\"/>\n                    <path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\" fill=\"#EA4335\"/>\n                    <path d=\"M1 1h22v22H1z\" fill=\"none\"/>\n                </svg>`;\n            const birdImage = new Image();\n            birdImage.src = 'data:image/svg+xml;base64,' + btoa(GOOGLE_LOGO_SVG);\n\n            // --- Bird Object ---\n            const bird = {\n                x: 60,\n                y: CANVAS_HEIGHT / 2,\n                width: 45,\n                height: 45,\n                gravity: 0.25,\n                lift: -6.5,\n                velocity: 0,\n\n                draw: function() {\n                    ctx.save();\n                    // Add a glow effect if cheat mode is active\n                    if (cheatModeActive) {\n                        ctx.shadowColor = '#FBBC05'; // Google Yellow\n                        ctx.shadowBlur = 20;\n                    }\n                    ctx.translate(this.x + this.width / 2, this.y + this.height / 2);\n                    const rotation = Math.min(Math.max(-0.5, this.velocity / 15), 0.9);\n                    ctx.rotate(rotation);\n                    ctx.drawImage(birdImage, -this.width / 2, -this.height / 2, this.width, this.height);\n                    ctx.restore();\n                },\n\n                update: function() {\n                    this.velocity += this.gravity;\n                    this.y += this.velocity;\n\n                    // Prevent bird from going off the top of the screen\n                    if (this.y < 0) {\n                        this.y = 0;\n                        this.velocity = 0;\n                    }\n                },\n\n                flap: function() {\n                    this.velocity = this.lift;\n                },\n\n                reset: function() {\n                    this.y = CANVAS_HEIGHT / 2;\n                    this.velocity = 0;\n                }\n            };\n\n            // --- Pipes Object ---\n            const pipes = {\n                array: [],\n                width: 70,\n                gap: 200,\n                speed: 2,\n                spawnInterval: 120,\n\n                draw: function() {\n                    this.array.forEach(pipe => {\n                        ctx.fillStyle = getComputedStyle(document.documentElement).getPropertyValue('--pipe-color').trim();\n                        ctx.strokeStyle = getComputedStyle(document.documentElement).getPropertyValue('--pipe-border-color').trim();\n                        ctx.lineWidth = 4;\n\n                        // Top pipe\n                        ctx.fillRect(pipe.x, 0, this.width, pipe.y);\n                        ctx.strokeRect(pipe.x, 0, this.width, pipe.y);\n\n                        // Bottom pipe\n                        const bottomPipeY = pipe.y + this.gap;\n                        const bottomPipeHeight = CANVAS_HEIGHT - bottomPipeY;\n                        ctx.fillRect(pipe.x, bottomPipeY, this.width, bottomPipeHeight);\n                        ctx.strokeRect(pipe.x, bottomPipeY, this.width, bottomPipeHeight);\n                    });\n                },\n\n                update: function() {\n                    // Spawn new pipes\n                    if (frames % this.spawnInterval === 0) {\n                        const minHeight = 80;\n                        const maxHeight = CANVAS_HEIGHT - this.gap - minHeight;\n                        const randomY = Math.floor(Math.random() * (maxHeight - minHeight + 1) + minHeight);\n                        this.array.push({ x: CANVAS_WIDTH, y: randomY, passed: false });\n                    }\n\n                    // Move and manage pipes\n                    this.array.forEach(pipe => {\n                        pipe.x -= this.speed;\n\n                        // Check for score\n                        if (!pipe.passed && pipe.x + this.width < bird.x) {\n                            pipe.passed = true;\n                            score++;\n                            updateScoreDisplay();\n                        }\n                    });\n\n                    // Remove off-screen pipes\n                    this.array = this.array.filter(pipe => pipe.x + this.width > 0);\n                },\n\n                reset: function() {\n                    this.array = [];\n                }\n            };\n\n            // --- Collision Detection ---\n            function checkCollisions() {\n                // If cheat mode is on, we are invincible\n                if (cheatModeActive) {\n                    return false;\n                }\n\n                // Ground collision\n                if (bird.y + bird.height >= CANVAS_HEIGHT) {\n                    return true;\n                }\n                \n                // Pipe collision\n                for (let i = 0; i < pipes.array.length; i++) {\n                    const p = pipes.array[i];\n                    if (\n                        bird.x < p.x + pipes.width &&\n                        bird.x + bird.width > p.x &&\n                        (bird.y < p.y || bird.y + bird.height > p.y + pipes.gap)\n                    ) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n\n            // --- UI and State Management ---\n            function updateScoreDisplay() {\n                scoreDisplay.textContent = score;\n            }\n\n            function loadHighScore() {\n                const storedHighScore = localStorage.getItem('flappyGoogleHighScore');\n                highScore = storedHighScore ? parseInt(storedHighScore, 10) : 0;\n            }\n\n            function saveHighScore() {\n                if (cheatModeActive) return; // Do not save high score if cheat is active\n\n                if (score > highScore) {\n                    highScore = score;\n                    localStorage.setItem('flappyGoogleHighScore', highScore);\n                }\n            }\n\n            function handleInput() {\n                switch (gameState) {\n                    case 'READY':\n                        startGame();\n                        break;\n                    case 'PLAYING':\n                        bird.flap();\n                        break;\n                }\n            }\n            \n            function startGame() {\n                gameState = 'PLAYING';\n                startScreen.style.display = 'none';\n                gameOverScreen.style.display = 'none';\n                scoreDisplay.style.display = 'block';\n                bird.flap();\n            }\n\n            function triggerGameOver() {\n                if (gameState === 'GAME_OVER') return;\n                gameState = 'GAME_OVER';\n                saveHighScore();\n                finalScoreEl.textContent = score;\n                highScoreEl.textContent = highScore;\n                \n                // Show cheat message if active\n                cheatMessage.style.display = cheatModeActive ? 'block' : 'none';\n\n                gameOverScreen.style.display = 'flex';\n                scoreDisplay.style.display = 'none';\n            }\n\n            function resetGame() {\n                bird.reset();\n                pipes.reset();\n                score = 0;\n                frames = 0;\n                updateScoreDisplay();\n                gameState = 'READY';\n                startScreen.style.display = 'flex';\n                gameOverScreen.style.display = 'none';\n                scoreDisplay.style.display = 'block';\n                scoreDisplay.textContent = '0';\n                cheatMessage.style.display = 'none';\n            }\n\n            function toggleCheatMode() {\n                cheatModeActive = !cheatModeActive;\n                cheatToggles.forEach(toggle => {\n                    toggle.classList.toggle('active', cheatModeActive);\n                });\n            }\n            \n            // --- Game Loop ---\n            function update() {\n                if (gameState !== 'PLAYING') return;\n                \n                bird.update();\n                pipes.update();\n                \n                if (checkCollisions()) {\n                    triggerGameOver();\n                }\n\n                frames++;\n            }\n\n            function draw() {\n                ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n                pipes.draw();\n                bird.draw();\n            }\n\n            function gameLoop() {\n                update();\n                draw();\n                requestAnimationFrame(gameLoop);\n            }\n\n            // --- Event Listeners ---\n            document.addEventListener('keydown', (e) => {\n                if (e.code === 'Space') {\n                    handleInput();\n                }\n                // Toggle cheat mode with 'c' key\n                if (e.key.toLowerCase() === 'c') {\n                    toggleCheatMode();\n                }\n            });\n            document.addEventListener('mousedown', handleInput);\n            document.addEventListener('touchstart', handleInput);\n            restartButton.addEventListener('click', (e) => {\n                e.stopPropagation(); // Prevent the click from triggering a flap\n                resetGame();\n            });\n            cheatToggles.forEach(toggle => {\n                toggle.addEventListener('click', (e) => {\n                    e.stopPropagation();\n                    toggleCheatMode();\n                });\n            });\n\n            // --- Initialization ---\n            function init() {\n                loadHighScore();\n                resetGame();\n                gameLoop();\n            }\n\n            init();\n        });\n    </script>\n\n</body>\n</html>"
  },
  {
    "id": "1756633935445",
    "name": "Space invaders",
    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Space Invaders JS</title>\n    <style>\n        /* Basic styling for the body and to center the game */\n        body {\n            margin: 0;\n            overflow: hidden; /* Hide scrollbars if canvas is slightly larger */\n            background-color: #000;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh; /* Full viewport height */\n            font-family: monospace, sans-serif; /* A simple, universally available retro-style font */\n            color: #fff;\n        }\n\n        /* Canvas styling */\n        canvas {\n            background-color: #000;\n            border: 2px solid #0f0; /* Green border for retro feel */\n            display: block; /* Remove extra space below canvas */\n        }\n\n        /* Game information overlay (score, lives) */\n        #game-info {\n            position: absolute;\n            top: 10px;\n            left: 10px;\n            color: #0f0; /* Green text */\n            font-size: 16px;\n            text-shadow: 0 0 5px #0f0; /* Glowing effect */\n            z-index: 10; /* Ensure it's above other elements */\n        }\n\n        /* Styling for game state screens (start, game over, win) */\n        #game-over-screen, #start-screen, #win-screen {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%); /* Center horizontally and vertically */\n            text-align: center;\n            color: #0f0;\n            text-shadow: 0 0 10px #0f0;\n            font-size: 24px;\n            display: none; /* Hidden by default */\n            flex-direction: column; /* Stack elements vertically */\n            gap: 20px; /* Space between elements */\n            z-index: 20; /* Ensure it's above game-info */\n            background-color: rgba(0, 0, 0, 0.7); /* Semi-transparent background */\n            padding: 30px;\n            border-radius: 10px;\n            border: 2px solid #0f0;\n        }\n\n        /* Make screens active when needed */\n        #game-over-screen.active, #start-screen.active, #win-screen.active {\n            display: flex;\n        }\n\n        /* Button styling */\n        button {\n            background-color: #0a0; /* Darker green */\n            color: #000; /* Black text */\n            border: 2px solid #0f0;\n            padding: 10px 20px;\n            font-size: 20px;\n            cursor: pointer;\n            box-shadow: 0 0 5px #0f0;\n            transition: background-color 0.2s, box-shadow 0.2s; /* Smooth hover effects */\n            font-family: monospace, sans-serif;\n            margin-top: 10px;\n        }\n\n        button:hover {\n            background-color: #0f0; /* Brighter green on hover */\n            box-shadow: 0 0 15px #0f0; /* More intense glow */\n        }\n\n        h1 {\n            margin-bottom: 20px;\n            font-size: 3em;\n            letter-spacing: 2px;\n        }\n        p {\n            font-size: 1.2em;\n            margin: 5px 0;\n        }\n    </style>\n</head>\n<body>\n    <!-- The main canvas where the game will be drawn -->\n    <canvas id=\"gameCanvas\" width=\"800\" height=\"600\"></canvas>\n\n    <!-- Game information display (score, lives) -->\n    <div id=\"game-info\">\n        Score: <span id=\"scoreDisplay\">0</span><br>\n        Lives: <span id=\"livesDisplay\">3</span>\n    </div>\n\n    <!-- Start screen overlay -->\n    <div id=\"start-screen\" class=\"active\">\n        <h1>SPACE INVADERS</h1>\n        <p>Use LEFT/RIGHT arrows to move</p>\n        <p>Use SPACE to shoot</p>\n        <button id=\"startButton\">START GAME</button>\n    </div>\n\n    <!-- Game over screen overlay -->\n    <div id=\"game-over-screen\">\n        <h1>GAME OVER</h1>\n        <p>Your Score: <span id=\"finalScoreDisplay\">0</span></p>\n        <button id=\"restartButton\">PLAY AGAIN</button>\n    </div>\n\n    <!-- Win screen overlay -->\n    <div id=\"win-screen\">\n        <h1>YOU WIN!</h1>\n        <p>Congratulations, Earth is safe!</p>\n        <p>Final Score: <span id=\"winScoreDisplay\">0</span></p>\n        <button id=\"playAgainButton\">PLAY AGAIN</button>\n    </div>\n\n    <script>\n        const canvas = document.getElementById('gameCanvas');\n        const ctx = canvas.getContext('2d');\n\n        // Get display elements for score, lives, and game screens\n        const scoreDisplay = document.getElementById('scoreDisplay');\n        const livesDisplay = document.getElementById('livesDisplay');\n        const startScreen = document.getElementById('start-screen');\n        const gameOverScreen = document.getElementById('game-over-screen');\n        const finalScoreDisplay = document.getElementById('finalScoreDisplay');\n        const restartButton = document.getElementById('restartButton');\n        const startButton = document.getElementById('startButton');\n        const winScreen = document.getElementById('win-screen');\n        const winScoreDisplay = document.getElementById('winScoreDisplay');\n        const playAgainButton = document.getElementById('playAgainButton');\n\n        // --- Game State Variables ---\n        let gameRunning = false; // Is the game actively playing?\n        let gameOver = false;    // Has the game ended in a loss?\n        let gameWon = false;     // Has the game ended in a win?\n        let score = 0;           // Player's score\n        let lives = 3;           // Player's remaining lives\n\n        // --- Player Configuration ---\n        const player = {\n            x: canvas.width / 2 - 25, // Centered horizontally\n            y: canvas.height - 60,    // Near the bottom\n            width: 50,\n            height: 20,\n            speed: 5,\n            color: '#0f0' // Green\n        };\n\n        // --- Input Handling ---\n        const keys = {}; // Object to track pressed keys\n        document.addEventListener('keydown', (e) => {\n            keys[e.code] = true; // Mark key as pressed\n            // Allow shooting only when game is running and no other bullet is active\n            if (e.code === 'Space' && gameRunning && !playerBulletActive) {\n                playerBullets.push({\n                    x: player.x + player.width / 2 - 2, // Center bullet on player\n                    y: player.y,\n                    width: 4,\n                    height: 10,\n                    speed: 8,\n                    color: '#0f0'\n                });\n                playerBulletActive = true; // Set flag to limit to one player bullet on screen\n            }\n            // Handle starting/restarting game from screens\n            if (!gameRunning && (e.code === 'Enter' || e.code === 'Space')) {\n                if (startScreen.classList.contains('active')) {\n                    startGame();\n                } else if (gameOverScreen.classList.contains('active') || winScreen.classList.contains('active')) {\n                    startGame(); // Restart directly\n                }\n            }\n        });\n        document.addEventListener('keyup', (e) => {\n            keys[e.code] = false; // Mark key as released\n        });\n\n        // --- Projectiles ---\n        let playerBullets = [];     // Array of player bullets\n        let invaderBullets = [];    // Array of invader bullets\n        let playerBulletActive = false; // Flag to enforce one player bullet at a time\n\n        // --- Invader Configuration ---\n        let invaders = [];          // Array of invader objects\n        const invaderRows = 5;\n        const invaderCols = 10;\n        const invaderWidth = 30;\n        const invaderHeight = 20;\n        const invaderPadding = 10;  // Space between invaders\n        const invaderOffsetTop = 50; // Initial Y offset from top\n        const invaderOffsetLeft = 50; // Initial X offset from left\n        let invaderMoveDirection = 1; // 1 for right, -1 for left\n        let invaderMoveSpeed = 0.5;   // Base horizontal speed per update cycle\n        let invaderDropSpeed = 10;    // Vertical drop distance when hitting edge\n        let invaderMoveInterval = 500; // Time (ms) between invader group movements\n        let lastInvaderMoveTime = 0;  // Timestamp of last invader movement\n        const invaderShootChance = 0.005; // Per frame chance for an invader to shoot\n\n        // --- Shelter Configuration ---\n        let shelters = [];          // Array of shelter objects\n        const shelterCount = 4;     // Number of shelters\n        const shelterWidth = 80;\n        const shelterHeight = 40;\n        const shelterHealth = 5;    // Hits a shelter can take\n\n        // --- Game Setup Functions ---\n\n        /**\n         * Creates and positions the shelters at the start of the game.\n         */\n        function createShelters() {\n            shelters = [];\n            // Calculate equal spacing between shelters\n            const totalShelterWidth = shelterCount * shelterWidth;\n            const availableWidth = canvas.width - totalShelterWidth;\n            const gap = availableWidth / (shelterCount + 1); // Gaps on both sides and between shelters\n\n            for (let i = 0; i < shelterCount; i++) {\n                shelters.push({\n                    x: gap + i * (shelterWidth + gap), // Position based on gap and previous shelters\n                    y: canvas.height - 150,           // Fixed position above player\n                    width: shelterWidth,\n                    height: shelterHeight,\n                    health: shelterHealth,\n                    color: '#0a0' // Initial color\n                });\n            }\n        }\n\n        /**\n         * Creates and populates the invaders grid.\n         */\n        function createInvaders() {\n            invaders = [];\n            for (let r = 0; r < invaderRows; r++) {\n                for (let c = 0; c < invaderCols; c++) {\n                    invaders.push({\n                        x: invaderOffsetLeft + c * (invaderWidth + invaderPadding),\n                        y: invaderOffsetTop + r * (invaderHeight + invaderPadding),\n                        width: invaderWidth,\n                        height: invaderHeight,\n                        color: ['#f00', '#f80', '#ff0', '#0f0', '#00f'][r % 5], // Different color per row\n                        row: r,\n                        col: c\n                    });\n                }\n            }\n            // Reset invader movement for new game\n            invaderMoveDirection = 1;\n            invaderMoveSpeed = 0.5;\n            invaderDropSpeed = 10;\n            invaderMoveInterval = 500;\n        }\n\n        /**\n         * Resets all game state variables and prepares for a new game.\n         */\n        function resetGame() {\n            score = 0;\n            lives = 3;\n            player.x = canvas.width / 2 - 25; // Reset player position\n            playerBullets = [];\n            invaderBullets = [];\n            playerBulletActive = false;\n            gameRunning = false;\n            gameOver = false;\n            gameWon = false;\n\n            // Hide all game state screens and show start screen\n            gameOverScreen.classList.remove('active');\n            winScreen.classList.remove('active');\n            startScreen.classList.add('active');\n            updateGameInfo(); // Update displayed score/lives\n            ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas\n        }\n\n        /**\n         * Starts the game. Initializes invaders, shelters, and sets game state.\n         */\n        function startGame() {\n            createInvaders();\n            createShelters();\n            score = 0;\n            lives = 3;\n            player.x = canvas.width / 2 - 25;\n            playerBullets = [];\n            invaderBullets = [];\n            playerBulletActive = false;\n\n            gameRunning = true;\n            gameOver = false;\n            gameWon = false;\n\n            // Hide all screens\n            startScreen.classList.remove('active');\n            gameOverScreen.classList.remove('active');\n            winScreen.classList.remove('active');\n            updateGameInfo(); // Update displayed score/lives\n            gameLoop(); // Start the main game loop\n        }\n\n        /**\n         * Updates the score and lives displays on the screen.\n         */\n        function updateGameInfo() {\n            scoreDisplay.textContent = score;\n            livesDisplay.textContent = lives;\n        }\n\n        // --- Drawing Functions ---\n\n        /**\n         * Draws the player cannon on the canvas.\n         */\n        function drawPlayer() {\n            ctx.fillStyle = player.color;\n            ctx.fillRect(player.x, player.y, player.width, player.height);\n        }\n\n        /**\n         * Draws all active invaders on the canvas.\n         */\n        function drawInvaders() {\n            invaders.forEach(invader => {\n                ctx.fillStyle = invader.color;\n                ctx.fillRect(invader.x, invader.y, invader.width, invader.height);\n                // Optional: A small black rectangle inside for a simple alien look\n                ctx.fillStyle = '#000';\n                ctx.fillRect(invader.x + invader.width / 4, invader.y + invader.height / 4, invader.width / 2, invader.height / 2);\n            });\n        }\n\n        /**\n         * Draws all active player and invader projectiles.\n         */\n        function drawProjectiles() {\n            playerBullets.forEach(bullet => {\n                ctx.fillStyle = bullet.color;\n                ctx.fillRect(bullet.x, bullet.y, bullet.width, bullet.height);\n            });\n            invaderBullets.forEach(bullet => {\n                ctx.fillStyle = bullet.color;\n                ctx.fillRect(bullet.x, bullet.y, bullet.width, bullet.height);\n            });\n        }\n\n        /**\n         * Draws all active shelters, showing their damage level.\n         */\n        function drawShelters() {\n            shelters.forEach(shelter => {\n                if (shelter.health > 0) {\n                    // Make shelters appear more damaged as health decreases\n                    const healthRatio = shelter.health / shelterHealth;\n                    // Gradually change color from green to darker as health drops\n                    const g = Math.floor(255 * healthRatio * 0.8); // Less intense green\n                    const r = Math.floor(255 * (1 - healthRatio) * 0.8); // More red as damage increases\n                    ctx.fillStyle = `rgb(${r}, ${g}, 0)`;\n                    ctx.fillRect(shelter.x, shelter.y, shelter.width, shelter.height);\n\n                    // Add some damage marks as black rectangles\n                    ctx.fillStyle = '#000';\n                    for (let i = 0; i < shelterHealth - shelter.health; i++) {\n                        // Randomly placed small black squares\n                        ctx.fillRect(shelter.x + (Math.random() * shelter.width * 0.8),\n                                     shelter.y + (Math.random() * shelter.height * 0.8),\n                                     5 + (Math.random() * 5), 5 + (Math.random() * 5));\n                    }\n                }\n            });\n        }\n\n        // --- Collision Detection ---\n\n        /**\n         * Checks for AABB (Axis-Aligned Bounding Box) collision between two rectangles.\n         * @param {Object} rect1 - The first rectangle {x, y, width, height}.\n         * @param {Object} rect2 - The second rectangle {x, y, width, height}.\n         * @returns {boolean} True if rectangles are overlapping, false otherwise.\n         */\n        function checkCollision(rect1, rect2) {\n            return rect1.x < rect2.x + rect2.width &&\n                   rect1.x + rect1.width > rect2.x &&\n                   rect1.y < rect2.y + rect2.height &&\n                   rect1.y + rect1.height > rect2.y;\n        }\n\n        // --- Game Logic Updates ---\n\n        /**\n         * The main update function, called repeatedly to advance game state.\n         */\n        function update() {\n            // Stop updates if game is not running or has ended\n            if (gameOver || gameWon || !gameRunning) return;\n\n            // --- Player Movement ---\n            if (keys['ArrowLeft'] && player.x > 0) {\n                player.x -= player.speed;\n            }\n            if (keys['ArrowRight'] && player.x < canvas.width - player.width) {\n                player.x += player.speed;\n            }\n\n            // --- Player Bullets Update ---\n            // Filter method to remove bullets that are off-screen or have collided\n            playerBullets = playerBullets.filter(bullet => {\n                bullet.y -= bullet.speed; // Move bullet upwards\n\n                // Collision with Invaders\n                for (let i = invaders.length - 1; i >= 0; i--) {\n                    if (checkCollision(bullet, invaders[i])) {\n                        score += 10;\n                        invaders.splice(i, 1); // Remove invader\n                        playerBulletActive = false; // Allow player to shoot again\n                        updateGameInfo(); // Update score display\n\n                        // Speed up invaders slightly as they are destroyed\n                        if (invaders.length > 0) {\n                             // Decrease interval, making invaders move faster\n                             invaderMoveInterval = Math.max(50, 500 - (invaderRows * invaderCols - invaders.length) * 5);\n                             invaderMoveSpeed += 0.005; // Also slightly increase horizontal step\n                        }\n                        return false; // Remove bullet\n                    }\n                }\n\n                // Collision with Shelters\n                for (let i = shelters.length - 1; i >= 0; i--) {\n                    if (shelters[i].health > 0 && checkCollision(bullet, shelters[i])) {\n                        shelters[i].health--; // Damage shelter\n                        playerBulletActive = false;\n                        return false; // Remove bullet\n                    }\n                }\n\n                return bullet.y > 0; // Keep bullet if it's still on screen (above y=0)\n            });\n            // If all player bullets are gone, reset the active flag\n            if (playerBullets.length === 0) playerBulletActive = false;\n\n            // --- Invader Movement ---\n            const now = Date.now();\n            if (now - lastInvaderMoveTime > invaderMoveInterval) {\n                let hitEdge = false;\n                lastInvaderMoveTime = now;\n\n                // Check if any invader has reached the horizontal edge\n                for (const invader of invaders) {\n                    if (invaderMoveDirection === 1 && invader.x + invader.width >= canvas.width - invaderOffsetLeft) {\n                        hitEdge = true;\n                        break;\n                    }\n                    if (invaderMoveDirection === -1 && invader.x <= invaderOffsetLeft) {\n                        hitEdge = true;\n                        break;\n                    }\n                }\n\n                if (hitEdge) {\n                    invaderMoveDirection *= -1; // Reverse horizontal direction\n                    invaders.forEach(invader => invader.y += invaderDropSpeed); // Move invaders down\n                } else {\n                    // Move invaders horizontally\n                    invaders.forEach(invader => invader.x += invaderMoveSpeed * invaderMoveInterval / 100 * invaderMoveDirection);\n                }\n\n                // --- Invader Shooting ---\n                // Only invaders above the player can shoot\n                const livingInvaders = invaders.filter(inv => inv.y < player.y);\n                if (livingInvaders.length > 0) {\n                    // Randomly select an invader to shoot, chance increases with number of invaders\n                    if (Math.random() < invaderShootChance * livingInvaders.length) {\n                        const shooter = livingInvaders[Math.floor(Math.random() * livingInvaders.length)];\n                        invaderBullets.push({\n                            x: shooter.x + shooter.width / 2 - 2,\n                            y: shooter.y + shooter.height,\n                            width: 4,\n                            height: 10,\n                            speed: 4,\n                            color: '#f00' // Red\n                        });\n                    }\n                }\n            }\n\n            // --- Invader Bullets Update ---\n            invaderBullets = invaderBullets.filter(bullet => {\n                bullet.y += bullet.speed; // Move bullet downwards\n\n                // Collision with Player\n                if (checkCollision(bullet, player)) {\n                    lives--;\n                    updateGameInfo();\n                    if (lives <= 0) {\n                        endGame(false); // Player lost\n                    }\n                    return false; // Remove bullet\n                }\n\n                // Collision with Shelters\n                for (let i = shelters.length - 1; i >= 0; i--) {\n                    if (shelters[i].health > 0 && checkCollision(bullet, shelters[i])) {\n                        shelters[i].health--; // Damage shelter\n                        return false; // Remove bullet\n                    }\n                }\n\n                return bullet.y < canvas.height; // Keep bullet if it's still on screen (below canvas height)\n            });\n\n            // --- Check Game Over Conditions ---\n            // 1. Invaders reached the player's line\n            for (const invader of invaders) {\n                if (invader.y + invader.height >= player.y) {\n                    endGame(false); // Invaders reached bottom\n                    return; // Stop further updates\n                }\n            }\n\n            // --- Check Win Condition ---\n            // 2. All invaders destroyed\n            if (invaders.length === 0) {\n                endGame(true); // All invaders eliminated\n            }\n        }\n\n        /**\n         * The main draw function, clears the canvas and redraws all game elements.\n         */\n        function draw() {\n            ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear entire canvas\n\n            // Only draw game elements if the game is running\n            if (!gameRunning && !gameOver && !gameWon) return;\n\n            drawPlayer();\n            drawInvaders();\n            drawProjectiles();\n            drawShelters();\n        }\n\n        /**\n         * Ends the game, displaying either the win or game over screen.\n         * @param {boolean} win - True if the player won, false if lost.\n         */\n        function endGame(win) {\n            gameRunning = false; // Stop the game loop\n            if (win) {\n                gameWon = true;\n                winScoreDisplay.textContent = score;\n                winScreen.classList.add('active'); // Show win screen\n            } else {\n                gameOver = true;\n                finalScoreDisplay.textContent = score;\n                gameOverScreen.classList.add('active'); // Show game over screen\n            }\n        }\n\n        /**\n         * The main game loop function, uses requestAnimationFrame for smooth animations.\n         */\n        function gameLoop() {\n            // Only update and draw if the game is running or has just ended (to show final frame)\n            if (gameRunning || gameOver || gameWon) {\n                update();\n                draw();\n            }\n\n            // Continue the loop if game hasn't definitively stopped (gameOver or gameWon means it's paused)\n            if (!gameOver && !gameWon) {\n                requestAnimationFrame(gameLoop);\n            }\n        }\n\n        // --- Event Listeners for UI Buttons ---\n        startButton.addEventListener('click', startGame);\n        restartButton.addEventListener('click', startGame);\n        playAgainButton.addEventListener('click', startGame);\n\n        // --- Initial Game Setup ---\n        resetGame(); // Set initial state and display the start screen\n        gameLoop(); // Start the animation loop, it will initially wait for 'startGame'\n    </script>\n</body>\n</html>"
  },
  {
    "id": "1756634604153",
    "name": "FGCEF V2",
    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Flappy Google</title>\n    <style>\n        :root {\n            --bg-color: #f0f0f0;\n            --game-bg-color: #70c5ce;\n            --pipe-color: #74bf2e;\n            --pipe-border-color: #4b8313;\n            --text-color: #ffffff;\n            --shadow-color: #0000004d;\n            --font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n        }\n\n        body {\n            margin: 0;\n            padding: 0;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            background-color: var(--bg-color);\n            font-family: var(--font-family);\n            color: var(--text-color);\n        }\n\n        #game-container {\n            position: relative;\n            width: 400px;\n            height: 600px;\n            overflow: hidden;\n            border-radius: 10px;\n            box-shadow: 0 10px 20px var(--shadow-color);\n        }\n\n        #gameCanvas {\n            background-color: var(--game-bg-color);\n            display: block;\n        }\n\n        .overlay {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            text-align: center;\n            background-color: rgba(0, 0, 0, 0.4);\n            backdrop-filter: blur(2px);\n        }\n\n        .overlay h1 {\n            font-size: 50px;\n            margin-bottom: 10px;\n            text-shadow: 3px 3px 5px var(--shadow-color);\n        }\n\n        .overlay p {\n            font-size: 20px;\n            margin: 5px 0;\n            text-shadow: 2px 2px 3px var(--shadow-color);\n        }\n\n        #restart-button {\n            margin-top: 20px;\n            padding: 15px 30px;\n            font-size: 20px;\n            font-weight: bold;\n            color: #4285F4;\n            background-color: #fff;\n            border: none;\n            border-radius: 8px;\n            cursor: pointer;\n            transition: transform 0.2s, box-shadow 0.2s;\n            box-shadow: 0 4px 6px var(--shadow-color);\n        }\n\n        #restart-button:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 6px 10px var(--shadow-color);\n        }\n        \n        #score-display {\n            position: absolute;\n            top: 20px;\n            left: 50%;\n            transform: translateX(-50%);\n            font-size: 50px;\n            font-weight: bold;\n            text-shadow: 3px 3px 5px rgba(0,0,0,0.5);\n            z-index: 10;\n        }\n\n        /* --- Cheat Mode Styles --- */\n        .cheat-toggle-container {\n            margin-top: 25px;\n            display: flex;\n            align-items: center;\n            gap: 15px;\n            font-size: 16px;\n            text-shadow: 2px 2px 3px var(--shadow-color);\n        }\n\n        .cheat-toggle {\n            width: 50px;\n            height: 26px;\n            background-color: #ccc;\n            border-radius: 13px;\n            cursor: pointer;\n            position: relative;\n            transition: background-color 0.3s;\n            flex-shrink: 0;\n        }\n\n        .cheat-toggle.active {\n            background-color: #34A853; /* Google Green */\n        }\n\n        .cheat-toggle-knob {\n            width: 22px;\n            height: 22px;\n            background-color: white;\n            border-radius: 50%;\n            position: absolute;\n            top: 2px;\n            left: 2px;\n            transition: transform 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n        }\n\n        .cheat-toggle.active .cheat-toggle-knob {\n            transform: translateX(24px);\n        }\n    </style>\n</head>\n<body>\n\n    <div id=\"game-container\">\n        <canvas id=\"gameCanvas\" width=\"400\" height=\"600\"></canvas>\n        <div id=\"score-display\">0</div>\n        \n        <div id=\"start-screen\" class=\"overlay\">\n            <h1>Flappy Google</h1>\n            <p>Click, tap, or press Space to start</p>\n            <p>Avoid the pipes!</p>\n            <div class=\"cheat-toggle-container\">\n                <label>Cheat Mode (Press 'C')</label>\n                <div class=\"cheat-toggle\">\n                    <div class=\"cheat-toggle-knob\"></div>\n                </div>\n            </div>\n        </div>\n\n        <div id=\"game-over-screen\" class=\"overlay\" style=\"display: none;\">\n            <h1>Game Over</h1>\n            <p>Score: <span id=\"final-score\">0</span></p>\n            <p>High Score: <span id=\"high-score\">0</span></p>\n            <p id=\"cheat-message\" style=\"display: none; font-size: 14px; color: #FBBC05; text-shadow: none; margin-top: 5px;\">High score saving is disabled in cheat mode.</p>\n            <button id=\"restart-button\">Restart</button>\n            <div class=\"cheat-toggle-container\">\n                <label>Cheat Mode (Press 'C')</label>\n                <div class=\"cheat-toggle\">\n                    <div class=\"cheat-toggle-knob\"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- DOM Elements ---\n            const canvas = document.getElementById('gameCanvas');\n            const ctx = canvas.getContext('2d');\n            const scoreDisplay = document.getElementById('score-display');\n            const startScreen = document.getElementById('start-screen');\n            const gameOverScreen = document.getElementById('game-over-screen');\n            const finalScoreEl = document.getElementById('final-score');\n            const highScoreEl = document.getElementById('high-score');\n            const restartButton = document.getElementById('restart-button');\n            const cheatToggles = document.querySelectorAll('.cheat-toggle');\n            const cheatMessage = document.getElementById('cheat-message');\n\n            // --- Game Constants ---\n            const CANVAS_WIDTH = canvas.width;\n            const CANVAS_HEIGHT = canvas.height;\n\n            // --- Game State ---\n            let gameState = 'READY'; // READY, PLAYING, GAME_OVER\n            let score = 0;\n            let highScore = 0;\n            let frames = 0;\n            let cheatModeActive = false;\n\n            // --- Google Logo SVG ---\n            const GOOGLE_LOGO_SVG = `\n                <svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\n                    <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\n                    <path d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l3.66-2.84z\" fill=\"#FBBC05\"/>\n                    <path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\" fill=\"#EA4335\"/>\n                    <path d=\"M1 1h22v22H1z\" fill=\"none\"/>\n                </svg>`;\n            const birdImage = new Image();\n            birdImage.src = 'data:image/svg+xml;base64,' + btoa(GOOGLE_LOGO_SVG);\n\n            // --- Bird Object ---\n            const bird = {\n                x: 60,\n                y: CANVAS_HEIGHT / 2,\n                width: 45,\n                height: 45,\n                gravity: 0.5,\n                lift: -10,\n                velocity: 0,\n\n                draw: function() {\n                    ctx.save();\n                    // Add a glow effect if cheat mode is active\n                    if (cheatModeActive) {\n                        ctx.shadowColor = '#FBBC05'; // Google Yellow\n                        ctx.shadowBlur = 20;\n                    }\n                    ctx.translate(this.x + this.width / 2, this.y + this.height / 2);\n                    const rotation = Math.min(Math.max(-0.5, this.velocity / 15), 0.9);\n                    ctx.rotate(rotation);\n                    ctx.drawImage(birdImage, -this.width / 2, -this.height / 2, this.width, this.height);\n                    ctx.restore();\n                },\n\n                update: function() {\n                    this.velocity += this.gravity;\n                    this.y += this.velocity;\n\n                    // Prevent bird from going off the top of the screen\n                    if (this.y < 0) {\n                        this.y = 0;\n                        this.velocity = 0;\n                    }\n                },\n\n                flap: function() {\n                    this.velocity = this.lift;\n                },\n\n                reset: function() {\n                    this.y = CANVAS_HEIGHT / 2;\n                    this.velocity = 0;\n                }\n            };\n\n            // --- Pipes Object ---\n            const pipes = {\n                array: [],\n                width: 70,\n                gap: 200,\n                speed: 15,\n                spawnInterval: 20,\n\n                draw: function() {\n                    this.array.forEach(pipe => {\n                        ctx.fillStyle = getComputedStyle(document.documentElement).getPropertyValue('--pipe-color').trim();\n                        ctx.strokeStyle = getComputedStyle(document.documentElement).getPropertyValue('--pipe-border-color').trim();\n                        ctx.lineWidth = 4;\n\n                        // Top pipe\n                        ctx.fillRect(pipe.x, 0, this.width, pipe.y);\n                        ctx.strokeRect(pipe.x, 0, this.width, pipe.y);\n\n                        // Bottom pipe\n                        const bottomPipeY = pipe.y + this.gap;\n                        const bottomPipeHeight = CANVAS_HEIGHT - bottomPipeY;\n                        ctx.fillRect(pipe.x, bottomPipeY, this.width, bottomPipeHeight);\n                        ctx.strokeRect(pipe.x, bottomPipeY, this.width, bottomPipeHeight);\n                    });\n                },\n\n                update: function() {\n                    // Spawn new pipes\n                    if (frames % this.spawnInterval === 0) {\n                        const minHeight = 80;\n                        const maxHeight = CANVAS_HEIGHT - this.gap - minHeight;\n                        const randomY = Math.floor(Math.random() * (maxHeight - minHeight + 1) + minHeight);\n                        this.array.push({ x: CANVAS_WIDTH, y: randomY, passed: false });\n                    }\n\n                    // Move and manage pipes\n                    this.array.forEach(pipe => {\n                        pipe.x -= this.speed;\n\n                        // Check for score\n                        if (!pipe.passed && pipe.x + this.width < bird.x) {\n                            pipe.passed = true;\n                            score++;\n                            updateScoreDisplay();\n                        }\n                    });\n\n                    // Remove off-screen pipes\n                    this.array = this.array.filter(pipe => pipe.x + this.width > 0);\n                },\n\n                reset: function() {\n                    this.array = [];\n                }\n            };\n\n            // --- Collision Detection ---\n            function checkCollisions() {\n                // If cheat mode is on, we are invincible\n                if (cheatModeActive) {\n                    return false;\n                }\n\n                // Ground collision\n                if (bird.y + bird.height >= CANVAS_HEIGHT) {\n                    return true;\n                }\n                \n                // Pipe collision\n                for (let i = 0; i < pipes.array.length; i++) {\n                    const p = pipes.array[i];\n                    if (\n                        bird.x < p.x + pipes.width &&\n                        bird.x + bird.width > p.x &&\n                        (bird.y < p.y || bird.y + bird.height > p.y + pipes.gap)\n                    ) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n\n            // --- UI and State Management ---\n            function updateScoreDisplay() {\n                scoreDisplay.textContent = score;\n            }\n\n            function loadHighScore() {\n                const storedHighScore = localStorage.getItem('flappyGoogleHighScore');\n                highScore = storedHighScore ? parseInt(storedHighScore, 10) : 0;\n            }\n\n            function saveHighScore() {\n                if (cheatModeActive) return; // Do not save high score if cheat is active\n\n                if (score > highScore) {\n                    highScore = score;\n                    localStorage.setItem('flappyGoogleHighScore', highScore);\n                }\n            }\n\n            function handleInput() {\n                switch (gameState) {\n                    case 'READY':\n                        startGame();\n                        break;\n                    case 'PLAYING':\n                        bird.flap();\n                        break;\n                }\n            }\n            \n            function startGame() {\n                gameState = 'PLAYING';\n                startScreen.style.display = 'none';\n                gameOverScreen.style.display = 'none';\n                scoreDisplay.style.display = 'block';\n                bird.flap();\n            }\n\n            function triggerGameOver() {\n                if (gameState === 'GAME_OVER') return;\n                gameState = 'GAME_OVER';\n                saveHighScore();\n                finalScoreEl.textContent = score;\n                highScoreEl.textContent = highScore;\n                \n                // Show cheat message if active\n                cheatMessage.style.display = cheatModeActive ? 'block' : 'none';\n\n                gameOverScreen.style.display = 'flex';\n                scoreDisplay.style.display = 'none';\n            }\n\n            function resetGame() {\n                bird.reset();\n                pipes.reset();\n                score = 0;\n                frames = 0;\n                updateScoreDisplay();\n                gameState = 'READY';\n                startScreen.style.display = 'flex';\n                gameOverScreen.style.display = 'none';\n                scoreDisplay.style.display = 'block';\n                scoreDisplay.textContent = '0';\n                cheatMessage.style.display = 'none';\n            }\n\n            function toggleCheatMode() {\n                cheatModeActive = !cheatModeActive;\n                cheatToggles.forEach(toggle => {\n                    toggle.classList.toggle('active', cheatModeActive);\n                });\n            }\n            \n            // --- Game Loop ---\n            function update() {\n                if (gameState !== 'PLAYING') return;\n                \n                bird.update();\n                pipes.update();\n                \n                if (checkCollisions()) {\n                    triggerGameOver();\n                }\n\n                frames++;\n            }\n\n            function draw() {\n                ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n                pipes.draw();\n                bird.draw();\n            }\n\n            function gameLoop() {\n                update();\n                draw();\n                requestAnimationFrame(gameLoop);\n            }\n\n            // --- Event Listeners ---\n            document.addEventListener('keydown', (e) => {\n                if (e.code === 'Space') {\n                    handleInput();\n                }\n                // Toggle cheat mode with 'c' key\n                if (e.key.toLowerCase() === 'c') {\n                    toggleCheatMode();\n                }\n            });\n            document.addEventListener('mousedown', handleInput);\n            document.addEventListener('touchstart', handleInput);\n            restartButton.addEventListener('click', (e) => {\n                e.stopPropagation(); // Prevent the click from triggering a flap\n                resetGame();\n            });\n            cheatToggles.forEach(toggle => {\n                toggle.addEventListener('click', (e) => {\n                    e.stopPropagation();\n                    toggleCheatMode();\n                });\n            });\n\n            // --- Initialization ---\n            function init() {\n                loadHighScore();\n                resetGame();\n                gameLoop();\n            }\n\n            init();\n        });\n    </script>\n\n</body>\n</html>",
    "version": 2,
    "title": "FGCEF V2"
  }
]